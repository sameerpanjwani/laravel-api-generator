<?php namespace $NAMESPACE_CONTROLLER$;

use $NAMESPACE_CONTRACT$\$MODEL_NAME$DisplayServiceInterface;
use $NAMESPACE_REQUEST$;
use $NAMESPACE_REQUEST$\Create$MODEL_NAME$Request;
use $NAMESPACE_REQUEST$\Update$MODEL_NAME$Request;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use Flash;
use App\Http\Controllers\AbstractBaseController;
use Response;

class $MODEL_NAME$Controller extends AbstractBaseController
{

	/** @var  $MODEL_NAME$Repository */
	private $$MODEL_NAME_CAMEL$Repository;

	function __construct($MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repo,$MODEL_NAME$DisplayServiceInterface $$MODEL_NAME_CAMEL$DisplayService)
	{
	    parent::__construct();
		$this->$MODEL_NAME_CAMEL$Repository = $$MODEL_NAME_CAMEL$Repo;
		$this->display_service = $$MODEL_NAME_CAMEL$DisplayService;
		$this->view['module_details']['main_module'] = '$MAIN_MODULE$';
      	$this->view['module_details']['sub_module'] = '$SUB_MODULE$';
      	$this->view['module_name'] = '$MODULE_NAME$';
      	$this->view['page_url'] = "$MODEL_NAME_PLURAL_CAMEL$";
      	$this->view['chart_data'] = "no";
      	$this->view['chart_remove'] = "no";
      	$this->view['pdf_view'] = 'no';
      	$this->view['current_page_url'] = route('$MODEL_NAME_PLURAL_CAMEL$.index');
	}
	/**
    	 * Display a listing of the $MODEL_NAME$.
    	 *
    	 * @return Response
    	 */
    	public function index()
    	{
    		$view = $this->display_service->getViewData();

    		$result = array_merge($this->view, $view);

    		return view('pages.$LAYOUT_NAME$.$MODEL_NAME_PLURAL_CAMEL$.index',$result);
    	}

    	/**
    	 * Show the form for creating a new $MODEL_NAME$.
    	 *
    	 * @return Response
    	 */
    	public function create()
    	{
    		$view = $this->display_service->getViewData();
    		$results = array_merge($this->view, $view);
    		return view('pages.$LAYOUT_NAME$.$MODEL_NAME_PLURAL_CAMEL$.create',$results);
    	}

    	/**
    	 * Store a newly created $MODEL_NAME$ in storage.
    	 *
    	 * @param Create$MODEL_NAME$Request $request
    	 *
    	 * @return Response
    	 */
    	public function store(Create$MODEL_NAME$Request $request)
    	{
    		/* if(Request::ajax()){
              \Response::json(['response'=>"success"]);
           }*/

    		$input = $request->all();

    		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->create($input);

    		Flash::success('Record created successfully.');

    		return $this->redirectOnResponse('$MODEL_NAME_PLURAL_CAMEL$.index');
    	}

    	/**
    	 * Display the specified $MODEL_NAME$.
    	 *
    	 * @param  int $id
    	 *
    	 * @return Response
    	 */
    	public function show($id)
    	{
    		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

    		if(empty($$MODEL_NAME_CAMEL$))
            {
            	Flash::error('$MODEL_NAME$ not found');

            	return redirect(route('$MODEL_NAME_PLURAL_CAMEL$.index'));
            }

    		$view = $this->display_service->getViewData();
    		$results = array_merge($this->view, $view);
    		$view['$MODEL_NAME_CAMEL$']=$$MODEL_NAME_CAMEL$;
    		$results_final = array_merge($results, $view);
    		return view('pages.$LAYOUT_NAME$.$MODEL_NAME_CAMEL$.show', $results_final);
    	}

    	/**
    	 * Show the form for editing the specified $MODEL_NAME$.
    	 *
    	 * @param  int $id
    	 *
    	 * @return Response
    	 */
    	public function edit($id)
    	{
    		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

            		if(empty($$MODEL_NAME_CAMEL$))
            		{

			            Flash::error('ID not found');

			            return $this->redirectOnResponse('$MODEL_NAME_CAMEL$.index');
            		}

    		$view = $this->display_service->getViewData();
    		$results = array_merge($this->view, $view);
    		$view['$MODEL_NAME_CAMEL$']=$$MODEL_NAME_CAMEL$;
    		$results_final = array_merge($results, $view);



    		return view('pages.$LAYOUT_NAME$.$MODEL_NAME_CAMEL$.edit', $results_final);
    	}

    	/**
        	 * Update the specified $MODEL_NAME$ in storage.
        	 *
        	 * @param  int              $id
        	 * @param Update$MODEL_NAME$Request $request
        	 *
        	 * @return Response
         */
    	public function update($id, Update$MODEL_NAME$Request $request)
    	{
    		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

           	if(empty($$MODEL_NAME_CAMEL$))
           	{
    			Flash::error('ID could not be found');

    			return $this->redirectOnResponse('$MODEL_NAME_PLURAL_CAMEL$.index');

    		}

    		$this->$MODEL_NAME_CAMEL$Repository->updateRich($request->all(), $id);

    		Flash::success('Record updated successfully.');

    		return $this->redirectOnResponse('$MODEL_NAME_PLURAL_CAMEL$.index');
    	}

    	/**
        	 * Remove the specified $MODEL_NAME$ from storage.
        	 *
        	 * @param  int $id
        	 *
        	 * @return Response
       	 */
        	public function destroy($id)
        	{
        		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        		if(empty($$MODEL_NAME_CAMEL$))
        		{
        			Flash::error('$MODEL_NAME$ not found');

        			return redirect(route('$MODEL_NAME_PLURAL_CAMEL$.index'));
        		}

        		$this->$MODEL_NAME_CAMEL$Repository->delete($id);

        		Flash::success('$MODEL_NAME$ deleted successfully.');

        		return redirect(route('$MODEL_NAME_PLURAL_CAMEL$.index'));
        	}

    	public function ajaxMainCrudTable()
        {
        		return $this->display_service->ajaxMainCrudTable();
        }


}
